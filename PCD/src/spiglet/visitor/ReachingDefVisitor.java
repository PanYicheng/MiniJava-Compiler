//
// Generated by JTB 1.3.2
//

package spiglet.visitor;

import spiglet.symboltable.SStatement;
import spiglet.syntaxtree.HLoadStmt;
import spiglet.syntaxtree.MoveStmt;
import spiglet.syntaxtree.Temp;
import spiglet.syntaxtree.special.CallStmt;
import spiglet.syntaxtree.special.MoveArgStmt;
import spiglet.syntaxtree.special.MoveCallStmt;
import spiglet.syntaxtree.special.MoveTempStmt;
import spiglet.syntaxtree.special.PassArgStmt;
import spiglet.syntaxtree.special.ReturnStmt;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class ReachingDefVisitor extends GJVoidDepthFirst<SStatement>//活性分析
{
	/**
	 * f0 -> "HLOAD"
	 * f1 -> Temp()
	 * f2 -> Temp()
	 * f3 -> IntegerLiteral()
	 */
	public void visit(HLoadStmt n, SStatement argu)
	{
		n.f2.accept(this, argu);
		argu.setDefTemp(n.f1);
	}

	/**
	 * f0 -> "MOVE"
	 * f1 -> Temp()
	 * f2 -> Exp()
	 */
	public void visit(MoveStmt n, SStatement argu)
	{
		n.f2.accept(this, argu);
		argu.setDefTemp(n.f1);
	}
	
	/**
	 * f0 -> "RETURN"
	 * f1 -> SimpleExp()
	 */
	public void visit(ReturnStmt n, SStatement argu)//RETURN表达式
	{
		n.f1.accept(this, argu);
	}
	
	/**
	 * f0 -> "PASSARG"
	 * f1 -> IntegerLiteral()
	 * f2 -> Temp()
	 */
	public void visit(PassArgStmt n, SStatement argu)
	{
		n.f2.accept(this, argu);
	}
	
	/**
	 * f0 -> "MOVE"
	 * f1 -> Reg()
	 * f2 -> Temp()
	 */
	public void visit(MoveArgStmt n, SStatement argu)
	{
		n.f2.accept(this, argu);
	}
	
	/**
	 * f0 -> "CALL"
	 * f1 -> SimpleExp()
	 */
	public void visit(CallStmt n, SStatement argu)
	{
		n.f1.accept(this, argu);
	}
	
	/**
	 * f0 -> "MOVE"
	 * f1 -> Temp()
	 * f2 -> Reg()
	 */
	public void visit(MoveCallStmt n, SStatement argu)
	{
		argu.setDefTemp(n.f1);		
	}
	
	/**
	 * f0 -> "MOVE"
	 * f1 -> Temp()
	 * f2 -> Temp()
	 */
	public void visit(MoveTempStmt n, SStatement argu)
	{
		n.f2.accept(this, argu);
		argu.setDefTemp(n.f1);
	}
			
	/**
	 * f0 -> "TEMP"
	 * f1 -> IntegerLiteral()
	 */
	public void visit(Temp n, SStatement argu)
	{
		argu.addUseTemp(n);
	}
}
